#!/bin/bash

# Set the working directory for the EC2 instance
EC2_HOME="/home/ec2-user"
cd $EC2_HOME

# Exit immediately if a command exits with a non-zero status
set -e

# Log file location to store script execution logs
LOG_FILE="user-data.log"

# Function to log messages with timestamp
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> $LOG_FILE
}

# Log the start of the script execution
log_message "Starting user-data script"

# Ensure AWS CLI is installed on the EC2 instance
log_message "Checking if AWS CLI is installed"
if ! command -v aws &> /dev/null; then
  log_message "AWS CLI not installed. Please install and configure it."
  exit 1
fi

# Ensure Docker is installed on the EC2 instance
log_message "Checking if Docker is installed"
if ! command -v docker &> /dev/null; then
  log_message "Docker not installed. Please install it."
  exit 1
fi

# Create the .env file with environment variables for Redis, Eureka, and Messages
log_message "Creating .env file"
cat <<EOL > .env
MESSAGES_PORT=80
EUREKA_HOSTNAME=10.0.0.5
REDIS_HOSTNAME=10.0.0.4
REDIS_PORT=6379
REDIS_USERNAME=messages
REDIS_PASSWORD=pass
EOL
log_message ".env file created"

# Create the docker-compose.yaml file for the services
log_message "Creating docker-compose.yaml file"
cat <<EOL > docker-compose.yaml
services:
  messages:
    image: messages:latest
    network_mode: host
    env_file: .env
    restart: always
EOL
log_message "docker-compose.yaml file created"

# Set the S3 bucket name where Docker image is stored
S3_BUCKET="aws-deployment-example-s3"

# Set file names for the Docker image and configuration
IMAGE_FILE="messages:latest.tar"

# Download the Docker image from the S3 bucket
log_message "Downloading $IMAGE_FILE from S3 bucket: $S3_BUCKET"
aws s3 cp s3://$S3_BUCKET/$IMAGE_FILE $IMAGE_FILE

# Load the downloaded Docker image
log_message "Loading Docker image from $IMAGE_FILE"
docker load -i $IMAGE_FILE

# Clean up by removing the downloaded image file after loading
rm -f $IMAGE_FILE
log_message "$IMAGE_FILE removed after loading"

# Enable and start the Docker-related service to manage containers
log_message "Enabling docker_boot.service"
systemctl enable docker_boot.service
log_message "docker_boot.service enabled"

log_message "Starting docker_boot.service"
systemctl start docker_boot.service
log_message "docker_boot.service started"

# Final log entry to indicate successful script execution
log_message "Script executed successfully"
