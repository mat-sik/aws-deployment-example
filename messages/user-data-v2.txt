#!/bin/bash

# Set the working directory for the EC2 instance
EC2_HOME="/home/ec2-user"
cd $EC2_HOME

# Exit immediately if a command exits with a non-zero status
set -e

# Log file location to store script execution logs
LOG_FILE="user-data.log"

# Function to log messages with timestamp
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> $LOG_FILE
}

# Log the start of the script execution
log_message "Starting user-data script"

# Ensure AWS CLI is installed on the EC2 instance
log_message "Checking if AWS CLI is installed"
if ! command -v aws &> /dev/null; then
  log_message "AWS CLI not installed. Please install and configure it."
  exit 1
fi

# Ensure Docker is installed on the EC2 instance
log_message "Checking if Docker is installed"
if ! command -v docker &> /dev/null; then
  log_message "Docker not installed. Please install it."
  exit 1
fi

# Tag name and value for EC2 instances
REDIS_TAG_NAME="Name"
REDIS_TAG_VALUE="redis-EC2"
DISCOVERY_TAG_NAME="Name"
DISCOVERY_TAG_VALUE="discovery-EC2"

# Fetch the private DNS of the Redis instance using the specified tag
log_message "Fetching private DNS of the Redis instance with tag $REDIS_TAG_NAME=$REDIS_TAG_VALUE"
REDIS_HOSTNAME=$(aws ec2 describe-instances \
    --filters "Name=tag:$REDIS_TAG_NAME,Values=$REDIS_TAG_VALUE" \
              "Name=instance-state-name,Values=running" \
    --query "Reservations[0].Instances[0].PrivateDnsName" \
    --output text)
log_message "Fetched REDIS_HOSTNAME: $REDIS_HOSTNAME"

# Fetch the private DNS of the Eureka (discovery) instance using the specified tag
log_message "Fetching private DNS of the Eureka instance with tag $DISCOVERY_TAG_NAME=$DISCOVERY_TAG_VALUE"
DISCOVERY_HOSTNAME=$(aws ec2 describe-instances \
    --filters "Name=tag:$DISCOVERY_TAG_NAME,Values=$DISCOVERY_TAG_VALUE" \
              "Name=instance-state-name,Values=running" \
    --query "Reservations[0].Instances[0].PrivateDnsName" \
    --output text)
log_message "Fetched EUREKA_HOSTNAME: $DISCOVERY_HOSTNAME"

# IMDSv2 token to fetch the current EC2 instance's hostname
log_message "Fetching IMDSv2 token"
TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
log_message "IMDSv2 token obtained"

# Fetch hostname of the calling EC2 instance
log_message "Fetching hostname of the calling EC2 instance"
HOSTNAME=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/hostname)
log_message "Fetched HOSTNAME: $HOSTNAME"

# Create the .env file with environment variables for Redis, Eureka, and Messages
log_message "Creating .env file"
cat <<EOL > .env
REDIS_HOSTNAME=$REDIS_HOSTNAME
REDIS_PORT=6379
REDIS_USERNAME=messages
REDIS_PASSWORD=pass
EUREKA_HOSTNAME=$DISCOVERY_HOSTNAME
MESSAGES_HOSTNAME=$HOSTNAME
EOL
log_message ".env file created"

# Create the docker-compose.yaml file for the services
log_message "Creating docker-compose.yaml file"
cat <<EOL > docker-compose.yaml
services:
  messages:
    image: messages:latest
    container_name: messages-1
    hostname: messages-1
    networks:
      - net
    ports:
      - "80:8080"
    env_file: .env
    restart: always
networks:
  net:
EOL
log_message "docker-compose.yaml file created"

# Set the S3 bucket name where Docker image is stored
S3_BUCKET="aws-deployment-example-s3"

# Set file names for the Docker image and configuration
IMAGE_FILE="messages:latest.tar"

# Download the Docker image from the S3 bucket
log_message "Downloading $IMAGE_FILE from S3 bucket: $S3_BUCKET"
aws s3 cp s3://$S3_BUCKET/$IMAGE_FILE $IMAGE_FILE

# Load the downloaded Docker image
log_message "Loading Docker image from $IMAGE_FILE"
docker load -i $IMAGE_FILE

# Clean up by removing the downloaded image file after loading
rm -f $IMAGE_FILE
log_message "$IMAGE_FILE removed after loading"

# Enable and start the Docker-related service to manage containers
log_message "Enabling docker_boot.service"
systemctl enable docker_boot.service
log_message "docker_boot.service enabled"

log_message "Starting docker_boot.service"
systemctl start docker_boot.service
log_message "docker_boot.service started"

# Final log entry to indicate successful script execution
log_message "Script executed successfully"
